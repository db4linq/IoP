general:
  [ ] slave dns server
  [ ] slave main http
  [ ] slave responder
  [ ] slave revamp
  [ ] new ideas brainstorming
  [ ] plant dead mail
  [ ] host change if plant dead! (You need to update the offline host somehow?)
    [ ] priority
  [ ] Restv4 make REST -> RESTful again
    [ ] extreme min

test:
  [ ] new daemon verification system
    [ ] new plant c: (another pi please - also required for testing remove)
  [ ] extensions
    [ ] water pump in action
  [ ] range update

mesh network:
  [ ] local connection lost? @low
    [ ] potential too few data simulated recover?


＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ hackday text @done (17-03-28 18:02) @project(general)
 ✔ WHAT DOES IT ACTUALLY DO FOR THE USER? @done (17-03-28 18:02) @project(general)
 ✔ WATER PUMP @done (17-03-28 18:02) @project(general)
 ✔ SOFTWARE SIGNAL @done (17-03-28 18:02) @project(general)
 ✔ RICH SETTINGS @done (17-03-28 18:02) @project(general)
 ✔ HARDWARE SIGNAL @done (17-03-28 18:02) @project(general)
 ✔ ARE YOU AWAY? @done (17-03-28 18:02) @project(general)
 ✔ = LESS & BETTER CARE @done (17-03-28 18:02) @project(general)
 ✔ neopixel @done (17-03-17 20:35) @project(test)
 ✔ activate init branch if no database existent @high @done (17-03-16 22:15) @project(frontend / no database configuration)
 ✔ water_pump @done (17-03-15 20:27) @project(test)
 ✔ create additional plant network (vm) @done (17-03-15 20:27) @project(test)
 ✔ init nginx @done (17-03-14 20:32) @project(general)
 ✔ init insert logrotate @done (17-03-14 20:32) @project(general)
 ✔ init crontab @done (17-03-14 20:32) @project(general)
 ✔ init PYTHONPATH @done (17-03-14 20:32) @project(general)
 ✔ discover integration init @done (17-03-14 20:32) @project(general)
 ✔ setup additonal drives @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ responsible @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ ramdisk @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ mail account @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ integrate water pump @done (17-03-13 21:59) @project(frontend / sensor_scripts / extensions)
 ✔ implement water_pump @done (17-03-13 21:59) @project(general)
 ✔ create sensors @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ create plant @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ create folders @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ create database - name @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ check if network already exists - warning (only for advanced - proceed) @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ /var/log/iop @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ /local/backup @done (17-03-13 21:59) @project(frontend / no database configuration)
 ✔ get Day/Night @critical @done (17-03-07 19:32) @project(frontend / rest / settings)
 ✔ daynighttime update @done (17-03-07 19:32) @project(mesh network / update)
 ✔ device offline notification @done (17-03-07 19:29) @project(general)
 ✔ js fix @done (17-03-03 17:50) @project(test)
 ✔ host change @done (17-03-03 17:50) @project(test)
 ✔ day/night change @done (17-03-03 17:50) @project(general)
 ✔ virtualbox discover @done (17-02-28 22:12) @project(test)
 ✔ discover @done (17-02-28 22:12) @project(test)
 ✔ up files if existing @done (17-02-28 21:00) @project(general)
 ✔ watch logs @done (17-02-27 21:21) @project(test)
 ✔ SLIP @done (17-02-27 21:21) @project(test)
 ✔ ip change slave @done (17-02-24 23:40) @project(general)
 ✔ discover change @done (17-02-24 23:30) @project(general)
 ✔ master foreign influence protection (with tailored only master <-> master or master --> slave communication) MLIP+(R) @done (17-02-24 20:04) @project(general)
 ✔ mesh network: reassign slaves to origin of remove message @done (17-02-24 19:13) @project(general)
 ✔ host change @done (17-02-23 11:12) @project(slave / mesh)
 ✔ slave foreign influence protection SLIP(R) @done (17-02-23 11:11) @project(general)
 ✔ frontend integration @done (17-02-22 20:52) @project(general)
 ✔ update masters on slave host change @done (17-02-22 20:43) @project(general)
 ✘ rest api integration @cancelled (17-02-22 20:42) @project(general)
 ✔ check if plant own slave and change @done (17-02-22 20:42) @project(general)
 ✔ add slave master update @done (17-02-22 20:42) @project(general)
 ✔ redirect if done @done (17-02-19 23:03) @project(frontend / add plant)
 ✔ point to settings plant @done (17-02-19 23:03) @project(frontend / manage)
 ✔ SensorSatisfactionValue @done (17-02-19 23:03) @project(frontend / rest / settings)
 ✔ sensorsatisfactionlevel update @done (17-02-19 23:02) @project(mesh network / update)
 ✔ investigate possible bug - no js calling? -- added eval() statement @done (17-02-19 23:01) @project(general)
 ✔ add persistant duration @high @done (17-02-18 17:34) @project(frontend / add plant)
 ✔ retire json_util @critical - replace datetime with timestamp @done (17-02-18 17:28) @project(frontend / rest)
 ✔ register @done (17-02-18 17:25) @project(slave / mesh)
 ✔ manage plants @critical @done (17-02-18 17:25) @project(slave / mesh)
 ✔ extend master frontend @done (17-02-18 17:25) @project(slave / mesh)
 ✔ extend master @done (17-02-18 17:25) @project(slave / mesh)
 ✔ change network - if already in network - other website?! @done (17-02-18 17:25) @project(slave / webserver)
 ✔ add with appropriate master ip @critical @done (17-02-18 17:25) @project(slave / mesh)
 ✘ consider log view! @low @cancelled (17-02-18 17:24) @project(frontend)
 ✔ rethink simulated @critical @done (17-02-18 17:24) @project(frontend / sensor_scripts)
 ✔ dummyplant hardware but not email - simulated in init? optional @done (17-02-18 17:24) @project(frontend / sensor_scripts)
 ✔ additional host field @done (17-02-18 17:24) @project(frontend)
 ✔ add main host (email and stuff) - changes when acessing frontend - dynamic! @done (17-02-18 17:24) @project(frontend)
 ✔ add image support (database?) @done (17-02-18 17:24) @project(frontend)
 ✔ host change @done (17-02-18 17:23) @project(test)
 ✔ register [lite] @done (17-02-04 22:07) @project(test)
 ✔ master --> slave @done (17-02-04 22:07) @project(test)
 ✔ discover @done (17-02-04 22:07) @project(test)
 ✔ deliver @done (17-02-04 22:07) @project(test)
 ✔ alive @done (17-02-04 22:07) @project(test)
 ✔ discover @done (17-01-18 20:59) @project(slave / mesh)
 ✔ deliver @done (17-01-18 20:59) @project(slave / mesh)
 ✔ port mesh_daemon with less instructions @done (17-01-18 20:58) @project(slave / mesh)
 ✔ insert incredientials and hard reset @done (17-01-18 20:58) @project(slave / webserver)
 ✔ check if wifi available and working - if not ap mode @done (17-01-18 20:58) @project(slave / connect)
 ✔ dedicated alive @done (17-01-14 20:23) @project(test)
 ✔ cronjob! (5min?) @done (17-01-14 20:23) @project(test)
 ✔ offline check @done (17-01-11 21:14) @project(test)
 ✔ notification @done (17-01-11 21:14) @project(test)
 ✔ moisture @done (17-01-11 21:14) @project(test)
 ✔ ledbar @done (17-01-11 21:14) @project(test)
 ✔ display @done (17-01-11 21:14) @project(test)
 ✔ rest_api create/plant @done (17-01-11 21:13) @project(test)
 ✔ delete holger and insert! (finish first setup) @done (17-01-11 21:13) @project(test)
 ✔ completed add_plant @done (17-01-11 21:13) @project(test)
 ✔ cannot operate on a closed database fix @critical @done (17-01-11 21:13) @project(test)
 ✔ simulated plant @critical @dad @done (17-01-02 14:39) @project(test)
 ✔ host - used for mail sending determination @done (16-12-31 00:26) @project(frontend / rest / settings)
 ✔ rest_api create/plant/register @done (16-12-31 00:25) @project(test)
 ✔ host before request hotfix - potential getting a lot worse!\ @done (16-12-31 00:25) @project(test)
 ✔ dedicated update @done (16-12-31 00:25) @project(test)
 ✔ dedicated register @done (16-12-31 00:25) @project(test)
 ✔ daemon testing @done (16-12-31 00:25) @project(test)
 ✔ to python 3 @critical @done (16-12-31 00:01) @project(frontend / sensor_scripts / driver)
 ✔ dedicated register @done (16-12-30 23:51) @project(test)
 ✔ improvement (under 1 second) @done (16-12-27 21:14) @project(frontend / rest / general)
 ✔ /get/sensor/range @done (16-12-27 21:14) @project(frontend / rest / general)
 ✔ low today @done (16-12-25 00:47) @project(frontend / rest / general)
 ✔ low ever @done (16-12-25 00:47) @project(frontend / rest / general)
 ✔ high today @done (16-12-25 00:47) @project(frontend / rest / general)
 ✔ high ever @done (16-12-25 00:47) @project(frontend / rest / general)
 ✔ use insert_sensor method? YEAH! @done (16-12-25 00:21) @project(mesh network / build notify / new_data)
 ✔ create all related tables entries (rest-api | create plant) @done (16-12-22 16:25) @project(test)
 ✔ dedicated reboot @done (16-12-22 16:24) @project(test)
 ✔ toolchain sensor @done (16-12-20 18:36) @project(test)
 ✔ moisture bar @done (16-12-20 18:35) @project(test)
 ✔ crashing with main module? INVESTIGATE @critical @done (16-12-18 19:10) @project(test)
 ✔ trafficlight @done (16-12-17 21:45) @project(test)
 ✔ display @done (16-12-17 21:45) @project(test)
 ✔ temperature + humidity @done (16-12-17 14:53) @project(test)
 ✔ moisture @done (16-12-17 14:53) @project(test)
 ✔ light @done (16-12-17 14:53) @project(test)
 ✔ last inserts to all other plants @high @done (16-12-12 19:46) @project(mesh network / dedicated register)
 ✔ DHT @done (16-12-08 21:20) @project(frontend / sensor_scripts / driver)
 ✔ integrate @done (16-12-06 20:47) @project(frontend / general settings)
 ✔ day/night cycle @done (16-12-06 20:47) @project(frontend / general settings)
 ✔ integrate al so in tools @done (16-12-03 21:02) @project(frontend / general settings)
 ✔ not everything! - except satisfaction @done (16-12-03 16:58) @project(frontend / rest / settings)
 ✔ integrate insert for them all! (redundancy settings!) @high @done (16-12-03 16:58) @project(frontend / rest / settings)
 ✔ everything in update folder -> mirror command @done (16-12-03 16:58) @project(frontend / rest / settings)
 ✔ -> get from rest @done (16-12-03 16:58) @project(frontend / rest / settings)
 ✔ responsible persons @done (16-12-03 16:53) @project(frontend / rest / settings)
 ✔ plant information @done (16-12-03 16:53) @project(frontend / rest / settings)
 ✔ messages @done (16-12-03 16:53) @project(frontend / rest / settings)
 ✔ mesh_network @done (16-12-03 16:53) @project(frontend / rest / settings)
 ✔ dedicated @done (16-12-03 16:53) @project(frontend / rest / settings)
 ✔ mirror to others @done (16-11-20 18:43) @project(frontend / sensor_scripts / tools)
 ✔ sat_streak @done (16-11-20 18:35) @project(frontend / rest / update)
 ✔ rest api to others @high @done (16-11-20 18:33) @project(frontend / add plant)
 ✔ notification sensor duration @done (16-11-20 16:04) @project(frontend / plant settings)
 ✔ notification interval @done (16-11-20 16:04) @project(frontend / plant settings)
 ✔ non-persistant duration setting @done (16-11-20 16:04) @project(frontend / plant settings)
 ✔ reset @done (16-11-19 15:03) @project(frontend / plant settings)
 ✔ people management @done (16-11-16 22:02) @project(frontend / general settings)
 ✔ add overview @high @critical @done (16-11-16 20:06) @project(frontend)
 ✔ fix import @critical @critical @done (16-11-14 21:29) @project(mesh network)
 ✔ add smiles @done (16-11-14 21:29) @project(frontend)
 ✔ MEDIUM @done (16-11-14 21:29) @project(frontend)
 ✔ HEALTHY @done (16-11-14 21:29) @project(frontend)
 ✔ FIX HOLGER @critical @done (16-11-14 21:29) @project(frontend)
 ✔ DANGER @done (16-11-14 21:29) @project(frontend)
 ✔ rest api integration @done (16-11-13 22:31) @project(frontend)
 ✔ neutral face @done (16-11-13 22:07) @project(frontend)
 ✔ loudly crying face @done (16-11-13 22:07) @project(frontend)
 ✔ confused face @done (16-11-13 22:07) @project(frontend)
 ✔ anguished face @done (16-11-13 22:07) @project(frontend)
 ✔ winking face @done (16-11-13 22:05) @project(frontend)
 ✔ thinking face @done (16-11-13 22:05) @project(frontend)
 ✔ smiling face with open mouth and smiling eyes @done (16-11-13 22:05) @project(frontend)
 ✔ slightly smiling face @done (16-11-13 22:05) @project(frontend)
 ✔ disappointed but relieved face @done (16-11-13 22:05) @project(frontend)
 ✔ also use: @done (16-11-12 18:27) @project(frontend / rest / sensordata)
 ✔ SensorStatus @done (16-11-12 18:27) @project(frontend / rest / sensordata)
 ✔ SensorCount @done (16-11-12 18:27) @project(frontend / rest / sensordata)
 ✔ SensorSatisfactionValue @done (16-11-12 18:22) @project(frontend / rest / sensordata)
 ✔ reintegrate SensorCount @done (16-11-12 18:21) @project(frontend / sensor_scripts / tools)
 ✔ integrate sat_streak @done (16-11-12 18:21) @project(frontend / sensor_scripts / tools)
 ✔ Investigate! (test) @done (16-11-12 18:21) @project(frontend / sensor_scripts / tools)
 ✔  problem 2 same ids, why? @done (16-11-12 18:21) @project(frontend / sensor_scripts / tools)
 ✔ insert in Daemon as settings option! (thx past Bilal) @done (16-11-12 15:47) @project(frontend / sensor_scripts / tools + models)
 ✔ add simulated plant! @high @done (16-11-12 15:47) @project(frontend / sensor_scripts / tools + models)
 ✔ if predicted.count() == 0 @done (16-11-12 15:41) @project(frontend / sensor_scripts / tools + models)
 ✔ generated in simulated @done (16-11-12 15:41) @project(frontend / sensor_scripts / tools + models)
 ✔ generate new @done (16-11-12 15:41) @project(frontend / sensor_scripts / tools + models)
 ✔ delete in predicted and insert in sensor data @done (16-11-12 15:41) @project(frontend / sensor_scripts / tools + models)
 ✔ check if predicted < now @done (16-11-12 15:41) @project(frontend / sensor_scripts / tools + models)
 ✔ change @done (16-11-12 14:55) @project(frontend / sensor_scripts / tools)
 ✔ not writing if ever inserted @critical @bug @done (16-11-12 14:54) @project(frontend / plant settings)
 ✔ not saving anymore @critical @bug @done (16-11-12 14:54) @project(frontend / plant settings)
 ✔ link from main page @done (16-11-12 14:53) @project(frontend / add plant)
 ✔ PID on file location @done (16-11-12 14:51) @project(frontend / sensor_scripts / daemon)
 ✔ plant @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ create all related tables entries  -> mirror from localhost @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ SensorStatus @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ SensorSatisfactionValue @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ SensorCount @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ PlantNetworkUptime @done (16-11-12 12:50) @project(frontend / rest / create)
 ✔ integrate max_persistant @done (16-11-09 21:56) @project(frontend / sensor_scripts / tools)
 ✔ get discover @done (16-11-09 21:46) @project(frontend / rest / discover)
 ✔ discover @done (16-11-09 21:46) @project(frontend / rest / discover)
 ✘ storage settings @cancelled (16-11-09 21:45) @project(frontend / general settings)
 ✔ message presets @done (16-11-09 21:43) @project(frontend / general settings)
 ✔ delete person @done (16-11-08 21:28) @project(frontend / general settings)
 ✔ add person @done (16-11-08 21:28) @project(frontend / general settings)
 ✔ change wizard @done (16-11-07 18:51) @project(frontend / general settings)
 ✔ change information @done (16-11-07 18:51) @project(frontend / general settings)
 ✔ message presets @done (16-10-31 17:18) @project(frontend / plant settings)
 ✔ add persistant duration! @done (16-10-09 18:38) @project(frontend / sensor_scripts / tools + models)
 ✔ add partial sensordata fetch -> 100 assets @done (16-09-27 18:38) @project(frontend / rest / get)
 ✘ progress bar @cancelled (16-09-27 18:37) @project(frontend / sensordata)
 ✔ could also be x^n or something like this, so it's like 10...25...100...1000...10000 @done (16-09-27 18:37) @project(frontend / sensordata)
 ✔ add partial sensordata fetch -> 100 assets @done (16-09-27 18:37) @project(frontend / sensordata)
 ✔ deliver new_data @done (16-09-27 15:09) @project(test)
 ✔ time also from datetime @done (16-09-26 18:56) @project(frontend / rest / get)
 ✔ dedicated deliver new_data @done (16-09-26 18:55) @project(test)
 ✔ trigger after insert data @done (16-09-26 15:58) @project(mesh network / build notify / new_data)
 ✔ dedicated mode @done (16-09-26 15:58) @project(mesh network / build notify / new_data)
 ✔ --> do this to all! except localhost @done (16-09-26 15:58) @project(mesh network / build notify / new_data)
 ✔ send new trigger @origin @done (16-09-25 20:12) @project(mesh network / build notify / new_data)
 ✔ new trigger -> notify new_data @done (16-09-25 20:12) @project(mesh network / build notify / new_data)
 ✔ get from plant! @done (16-09-25 20:12) @project(mesh network / build notify / new_data)
 ✔ fetch data @target @done (16-09-25 20:12) @project(mesh network / build notify / new_data)
 ✔ switch to indexedDB @done (16-09-24 14:29) @project(frontend / sensordata)
 ✔ add sensordata if new data = [] - not access predicted @done (16-09-24 14:29) @project(frontend / sensordata)
 ✔ read from indexedDB @done (16-09-24 14:24) @project(frontend / sensordata)
 ✔ write to indexedDB @done (16-09-23 23:02) @project(frontend / sensordata)
 ✔ pie bug @done (16-09-21 21:36) @project(frontend / sensordata)
 ✔ add add_plant redirect @done (16-09-21 21:33) @project(frontend)
 ✔ add add_plant @done (16-09-21 21:33) @project(frontend)
 ✔ fix general links @done (16-09-21 20:15) @project(frontend)
 ✔ status @done (16-09-21 18:18) @project(mesh network / dedicated register)
 ✔ dedicated register @done (16-09-21 18:18) @project(test)
 ✔ check if plant with ip already exists @done (16-09-21 18:18) @project(mesh network / dedicated register)
 ✔ add_plant @done (16-09-21 18:18) @project(test)
 ✘ only inserts holger @cancelled (16-09-21 16:07) @project(mesh network / dedicated register)
 ✘ only inserts holger @cancelled (16-09-21 16:07) @project(frontend / add plant)
 ✔ logic @done (16-09-20 20:42) @project(frontend / add plant)
 ✔ layout @done (16-09-19 20:41) @project(frontend / add plant)
 ✔ rest api change of underlying db in virtualbox -> does it work at all or do I need to restart the process? @done (16-09-18 13:38) @project(test)
 ✔ MoistureBar @done (16-09-18 13:37) @project(frontend / sensor_scripts / extensions / water_pump)
 ✔ LED to python 3 @done (16-09-18 13:37) @project(frontend / sensor_scripts / extensions)
 ✔ TrafficLight @done (16-09-17 17:34) @project(frontend / sensor_scripts / extensions / water_pump)
 ✔ start sensor_data daemon @new @done (16-09-17 17:05) @project(mesh network / build register)
 ✔ -> check if available @done (16-09-17 17:05) @project(mesh network / build register)
 ✔ changes automatically detected! @done (16-09-17 16:29) @project(frontend / rest / all)
 ✔ no database mode @done (16-09-17 14:40) @project(frontend / rest / all)
 ✔ -> detect change of database? @done (16-09-17 14:40) @project(frontend / rest / all)
 ✔ if both is True start loop -> else not @done (16-09-17 14:00) @project(frontend / sensor_scripts / daemon)
 ✔ check no database @done (16-09-17 14:00) @project(frontend / sensor_scripts / daemon)
 ✔ check already running @done (16-09-17 14:00) @project(frontend / sensor_scripts / daemon)
 ✔ port moisture @done (16-09-16 15:35) @project(frontend / sensor_scripts / core)
 ✔ port light @done (16-09-16 15:35) @project(frontend / sensor_scripts / core)
 ✔ multithreaded process deamon @done (16-09-15 20:31) @project(test)
 ✔ registered change on @new @done (16-09-14 21:27) @project(mesh network / build register)
 ✔ different port and listen 120 (alive) or 320 (register) -> check if fail or not! Is better with that @done (16-09-14 21:27) @project(mesh network / build register and alive)
 ✔ database integration @done (16-09-14 21:27) @project(mesh network / build register and alive)
 ✔ alive: register needed @done (16-09-14 21:26) @project(test)
 ✔ reply with [3] == NOT_CHANGED, CHANGED @done (16-09-13 20:43) @project(mesh network / build notify / ip)
 ✔ notify_ip @done (16-09-13 20:43) @project(test)
 ✔ detect if changes @done (16-09-13 20:43) @project(mesh network / build notify / ip)
 ✔ register @done (16-09-13 20:42) @project(test)
 ✔ discover with database integration @done (16-09-13 20:42) @project(test)
 ✘ rest api to others [insert] @new @cancelled (16-09-13 18:28) @project(mesh network / build register)
 ✘ frontend! @cancelled (16-09-13 18:28) @project(mesh network / build register)
 ✔ send done @new @done (16-09-13 15:11) @project(mesh network / build register)
 ✔ send done @existing @done (16-09-13 15:11) @project(mesh network / build register)
 ✔ wget until 404 own adress index (max 4) - kill http_server @done (16-09-13 15:06) @project(mesh network / build register)
 ✔ test with alive, rest @existing @done (16-09-13 15:06) @project(mesh network / build register)
 ✔ send working @existing @done (16-09-13 15:06) @project(mesh network / build register)
 ✔ send finished @existing @done (16-09-13 15:06) @project(mesh network / build register)
 ✔ change local plant @new @done (16-09-13 14:54) @project(mesh network / build register)
 ✔ download file, rename @new @done (16-09-12 16:13) @project(mesh network / build register)
 ✔ send HTTP established [encrypted] [A_MESSAGE port, B_MESSAGE hash, C_MESSAGE new_plantUUID] @existing @done (16-09-12 15:39) @project(mesh network / build register)
 ✔ open HTTP server @existing @done (16-09-10 18:03) @project(mesh network / build register)
 ✔ create database backup [named hash] @existing @done (16-09-10 18:03) @project(mesh network / build register)
 ✔ save and say ok! @new @done (16-09-10 16:10) @project(mesh network / build register)
 ✔ send encrypted key @existing @done (16-09-10 15:58) @project(mesh network / build register)
 ✔ generate AES(or something else) key @done (16-09-10 15:58) @project(mesh network / build register)
 ✔ send publickey @new @done (16-09-08 20:40) @project(mesh network / build register)
 ✔ reply not registered @new @done (16-09-06 19:31) @project(mesh network / build register)
 ✔ fetch all discovered @done (16-09-06 19:31) @project(mesh network / build register)
 ✔ discover @existing @done (16-09-06 19:31) @project(mesh network / build register)
 ✔ delay 5 sec @existing @done (16-09-06 19:31) @project(mesh network / build register)
 ✔ ask publickey @existing @done (16-09-06 19:31) @project(mesh network / build register)
 ✔ discovered into database @done (16-09-06 19:21) @project(mesh network / build register)
 ✔ add MeshObject @done (16-09-06 19:20) @project(mesh network / build register)
 ✔ discover @done (16-09-05 20:14) @project(test)
 ✔ mesh remove add removal of /local/back02-24 19:20) @project(general)
 ✔ preselect current message @project(frontend / plant settings)

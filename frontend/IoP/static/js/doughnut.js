// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    $.fn.drawDoughnutChart = function(value, max_min_range, ranges, options) {
      var $pathGroup, $paths, $summary, $summaryNumber, $summaryTitle, $svg, $this, CapValue, H, Max, Min, PI, W, animateFrame, animationLoop, animationOptions, baseCutoutRadius, baseDoughnutRadius, centerX, centerY, cos, cutoutRadius, data, doughnutRadius, drawDoughnutText, drawPieSegments, easingFunction, getHollowCirclePath, i, isNumber, len, limiter, requestAnimFrame, segmentTotal, settings, sin, summarySize;
      if (value < 0) {
        limiter = Math.abs(max_min_range['min']) - Math.abs(value);
        if (value > max_min_range['min']) {
          limiter = 0;
        }
        data = [
          {
            title: "--",
            value: Math.abs(limiter),
            color: "#000000"
          }, {
            title: "--",
            value: Math.abs(value),
            color: "#2C3E50"
          }
        ];
      } else {
        limiter = max_min_range['max'] - value;
        console.log(limiter);
        console.log(value);
        data = [
          {
            title: "--",
            value: value,
            color: "#2C3E50"
          }, {
            title: "--",
            value: limiter,
            color: "#000000"
          }
        ];
      }
      $this = this;
      W = $this.width();
      H = $this.height();
      centerX = W / 2;
      centerY = H / 2;
      cos = Math.cos;
      sin = Math.sin;
      PI = Math.PI;
      settings = $.extend({
        segmentShowStroke: true,
        segmentStrokeColor: '#0C1013',
        segmentStrokeWidth: 1,
        baseColor: 'rgba(0,0,0,0.5)',
        baseOffset: 4,
        edgeOffset: 10,
        percentageInnerCutout: 75,
        animation: true,
        animationSteps: 45,
        animationEasing: 'easeInOutExpo',
        animateRotate: true,
        tipOffsetX: -8,
        tipOffsetY: -45,
        tipClass: 'doughnutTip',
        summaryClass: 'doughnutSummary',
        summaryTitle: 'Derzeit:',
        summaryTitleClass: 'doughnutSummaryTitle',
        summaryNumberClass: 'doughnutSummaryNumber',
        beforeDraw: function() {},
        afterDrawed: function() {}
      }, options);
      animationOptions = {
        linear: function(t) {
          return t;
        },
        easeInOutExpo: function(t) {
          var v;
          v = t < .5 ? 8 * t * t * t * t : 1 - (8 * --t * t * t * t);
          if (v > 1) {
            return 1;
          } else {
            return v;
          }
        }
      };
      requestAnimFrame = (function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
          window.setTimeout(callback, 1000 / 60);
        };
      })();
      getHollowCirclePath = function(doughnutRadius, cutoutRadius) {
        var cmd, endRadius, endX, endX2, endY, endY2, segmentAngle, startRadius, startX, startX2, startY, startY2;
        startRadius = -1.570;
        segmentAngle = 6.2831;
        endRadius = 4.7131;
        startX = centerX + cos(startRadius) * doughnutRadius;
        startY = centerY + sin(startRadius) * doughnutRadius;
        endX2 = centerX + cos(startRadius) * cutoutRadius;
        endY2 = centerY + sin(startRadius) * cutoutRadius;
        endX = centerX + cos(endRadius) * doughnutRadius;
        endY = centerY + sin(endRadius) * doughnutRadius;
        startX2 = centerX + cos(endRadius) * cutoutRadius;
        startY2 = centerY + sin(endRadius) * cutoutRadius;
        cmd = ['M', startX, startY, 'A', doughnutRadius, doughnutRadius, 0, 1, 1, endX, endY, 'Z', 'M', startX2, startY2, 'A', cutoutRadius, cutoutRadius, 0, 1, 0, endX2, endY2, 'Z'];
        cmd = cmd.join(' ');
        return cmd;
      };
      drawPieSegments = function(animationDecimal) {
        var cmd, endRadius, endX, endX2, endY, endY2, i, largeArc, len, rotateAnimation, segmentAngle, startRadius, startX, startX2, startY, startY2;
        startRadius = -PI / 2;
        rotateAnimation = 1;
        if (settings.animation && settings.animateRotate) {
          rotateAnimation = animationDecimal;
        }
        drawDoughnutText(animationDecimal, segmentTotal);
        $pathGroup.attr('opacity', animationDecimal);
        if (data.length === 1 && 4.7122 < rotateAnimation * data[0].value / segmentTotal * PI * 2 + startRadius) {
          $paths[0].attr('d', getHollowCirclePath(doughnutRadius, cutoutRadius));
          return;
        }
        i = 0;
        len = data.length;
        while (i < len) {
          segmentAngle = rotateAnimation * data[i].value / segmentTotal * PI * 2;
          endRadius = startRadius + segmentAngle;
          largeArc = (endRadius - startRadius) % PI * 2 > PI ? 1 : 0;
          startX = centerX + cos(startRadius) * doughnutRadius;
          startY = centerY + sin(startRadius) * doughnutRadius;
          endX2 = centerX + cos(startRadius) * cutoutRadius;
          endY2 = centerY + sin(startRadius) * cutoutRadius;
          endX = centerX + cos(endRadius) * doughnutRadius;
          endY = centerY + sin(endRadius) * doughnutRadius;
          startX2 = centerX + cos(endRadius) * cutoutRadius;
          startY2 = centerY + sin(endRadius) * cutoutRadius;
          cmd = ['M', startX, startY, 'A', doughnutRadius, doughnutRadius, 0, largeArc, 1, endX, endY, 'L', startX2, startY2, 'A', cutoutRadius, cutoutRadius, 0, largeArc, 0, endX2, endY2, 'Z'];
          $paths[i].attr('d', cmd.join(' '));
          startRadius += segmentAngle;
          i++;
        }
      };
      drawDoughnutText = function(animationDecimal, segmentTotal) {
        $summaryNumber.css({
          opacity: animationDecimal
        }).text((data[0].value * animationDecimal).toFixed(1));
      };
      animateFrame = function(cnt, drawData) {
        var easeAdjustedAnimationPercent;
        easeAdjustedAnimationPercent = settings.animation ? CapValue(easingFunction(cnt), null, 0) : 1;
        drawData(easeAdjustedAnimationPercent);
      };
      animationLoop = function(drawData) {
        var animFrameAmount, cnt;
        animFrameAmount = settings.animation ? 1 / CapValue(settings.animationSteps, Number.MAX_VALUE, 1) : 1;
        cnt = settings.animation ? 0 : 1;
        requestAnimFrame(function() {
          cnt += animFrameAmount;
          animateFrame(cnt, drawData);
          if (cnt <= 1) {
            requestAnimFrame(arguments.callee);
          } else {
            settings.afterDrawed.call($this);
          }
        });
      };
      Max = function(arr) {
        return Math.max.apply(null, arr);
      };
      Min = function(arr) {
        return Math.min.apply(null, arr);
      };
      isNumber = function(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };
      CapValue = function(valueToCap, maxValue, minValue) {
        if (isNumber(maxValue) && valueToCap > maxValue) {
          return maxValue;
        }
        if (isNumber(minValue) && valueToCap < minValue) {
          return minValue;
        }
        return valueToCap;
      };
      settings.beforeDraw.call($this);
      $svg = $('<svg width="' + W + '" height="' + H + '" viewBox="0 0 ' + W + ' ' + H + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"></svg>').appendTo($this);
      $paths = [];
      easingFunction = animationOptions[settings.animationEasing];
      doughnutRadius = Min([H / 2, W / 2]) - settings.edgeOffset;
      cutoutRadius = doughnutRadius * settings.percentageInnerCutout / 100;
      segmentTotal = 0;
      baseDoughnutRadius = doughnutRadius + settings.baseOffset;
      baseCutoutRadius = cutoutRadius - settings.baseOffset;
      $(document.createElementNS('http://www.w3.org/2000/svg', 'path')).attr({
        'd': getHollowCirclePath(baseDoughnutRadius, baseCutoutRadius),
        'fill': settings.baseColor
      }).appendTo($svg);
      $pathGroup = $(document.createElementNS('http://www.w3.org/2000/svg', 'g'));
      $pathGroup.attr({
        opacity: 0
      }).appendTo($svg);
      summarySize = (cutoutRadius - (doughnutRadius - cutoutRadius)) * 2;
      $summary = $('<div class="' + settings.summaryClass + '" />').appendTo($this).css({
        width: summarySize + 'px',
        height: summarySize + 'px',
        'margin-left': -(summarySize / 2) + 'px',
        'margin-top': -(summarySize / 2) + 'px'
      });
      $summaryTitle = $('<p class="' + settings.summaryTitleClass + '">' + settings.summaryTitle + '</p>').appendTo($summary);
      $summaryNumber = $('<p class="' + settings.summaryNumberClass + '"></p>').appendTo($summary).css({
        opacity: 0
      });
      i = 0;
      len = data.length;
      while (i < len) {
        segmentTotal += data[i].value;
        $paths[i] = $(document.createElementNS('http://www.w3.org/2000/svg', 'path')).attr({
          'stroke-width': settings.segmentStrokeWidth,
          'stroke': settings.segmentStrokeColor,
          'fill': data[i].color,
          'data-order': i
        }).appendTo($pathGroup);
        i++;
      }
      animationLoop(drawPieSegments);
      return $this;
    };
  })(jQuery);

}).call(this);
